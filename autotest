# -*- mode: ruby -*-
# vim:set ft=ruby:

$VERBOSE = false

class Autotest::Rspec < Autotest
  def results_breakdown
    result = results.is_a?(Array) ? results.last : results.split("\n").last
    return [] unless result =~ /example/
    bd = %w(example failure pending).inject({}) do |acc, x|
      acc[x] = result[/(\d+) #{x}/, 1].to_i
      acc
    end
    [ bd['example'], bd['failure'], bd['pending'] ]
  end

  def results_description
    examples, failures, pending = results_breakdown
    pl = proc { |word, num| "#{num} #{word}#{'s' if num != 1}" }
    "#{pl.call('example', examples)}, #{pl.call('failure', failures)}, #{pending} pending"
  end

  def pending?
    _, _, pending = results_breakdown
    pending && pending > 0
  end

  # Use `spec`, not ruby
  unless defined? Autotest::RailsRspec
    def make_test_cmd(files_to_test)
      return "spec #{add_options_if_present} #{files_to_test.keys.flatten.join(' ')}"
    end
  end
end

# ganked a lot from autotest-notification:
# http://github.com/carlosbrando/autotest-notification
module Autotest::Growl
  def self.growlnotify(title, msg, img, pri=0, sticky="")
    priority = 0
    img = "~/.autotest_images/#{img}.png"
    system "growlnotify -n autotest --image #{img} -p #{priority} -m #{msg.inspect} #{title} #{sticky} 2>/dev/null"
  end

  def self.growl(color, msg)
    case color
    when :green
      growlnotify 'Green', msg, 'pass'
    when :yellow
      growlnotify 'Yellow?', msg, 'pass'
    when :red
      growlnotify 'Red', msg, 'fail'
    end
  end

  Autotest.add_hook :red do |at|
    growl(:red, at.results_description)
  end

  Autotest.add_hook :green do |at|
    if at.pending?
      growl(:yellow, at.results_description)
    else
      growl(:green, at.results_description)
    end
  end

  Autotest.add_hook :all_good do |at|
    next unless at.tainted
    if at.pending?
      growl(:yellow, at.results_description)
    else
      growl(:green, at.results_description)
    end
  end
end

Autotest.add_hook :initialize do |at|
  %w[.hg .git vendor].each { |exception| at.add_exception(exception) }
end

Autotest.add_hook :initialize do |at|
  unless ARGV.empty?
    at.find_directories = ARGV.dup
  end
end
