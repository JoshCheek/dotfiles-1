#!/usr/local/plan9/bin/rc
# WMII Configuration

oldpath=$path
path=($PLAN9/bin $path)

MODKEY=Mod1
MODKEY2=Mod4
UP=k
DOWN=j
LEFT=h
RIGHT=l

WMII_FONT='-windows-proggytiny-*-r-*-*-*-*-*-*-*-*-*-*'
WMII_NORMCOLORS='#f6f6f6 #666666 #666666'
WMII_FOCUSCOLORS='#ffcd8b #404040 #404040'
WMII_BACKGROUND='#222222'

WMII_TERM=(urxvtc)

fn wmiimenu {
	dmenu -b -fn $WMII_FONT -nb '#666666' -nf '#f6f6f6' -sb '#404040' -sf '#ffcd8b'
}

# Column Rules {{{1
wmiir write /colrules <<!
/./ -> 50+50
!

# Tagging Rules {{{1
wmiir write /tagrules <<!
/Firefox/ -> www
/XMMS.*/ -> ~
/Gimp.*/ -> ~
/MPlayer.*/ -> ~
/.*/ -> !
/.*/ -> 1
!

# Status Bar Info {{{1
fn status {
	echo -n `{uptime | sed 's/.*up/up/; s/,//g; s/load averages:/ | /'} '|' `{date}
}

# Events {{{1
fn Event-Start {
	if(~ $1 wmiirc) {
		rm -f $progs_file
		rm -f $tagrules_file
		exit
	}
}
fn Event-Key {
	eval Key-$1 $1
}
fn Event-CreateTag {
	echo $WMII_NORMCOLORS $* | wmiir create /lbar/$*
}
fn Event-DestroyTag {
	wmiir remove /lbar/$*
}
fn Event-FocusTag {
	wmiir xwrite /lbar/$* $WMII_FOCUSCOLORS $*
}
fn Event-UnfocusTag {
	wmiir xwrite /lbar/$* $WMII_NORMCOLORS $*
}
fn Event-UrgentTag {
	shift
	wmiir xwrite "/lbar/\$@" "*\$@"
}
fn Event-NotUrgentTag {
	shift
	wmiir xwrite "/lbar/\$@" "\$@"
}
fn Event-LeftBarClick {
	shift
	wmiir xwrite /ctl view $*
}
fn Event-RightBarClick {
	shift
	wmii-mpc-barclick $1
}
fn Event-CreateClient {
	if (test -f $tagrules_file) {
		restore_default_tagrules
		rm -f $tagrules_file
	}
}

# Actions {{{1
fn Action {
	action=$1; shift
	if(whatis Action-$action | 9 grep -s '^fn ') {
		Action-$action $* &
	}
	if not {
		run_command `{config_whatis $action} $* &
	}
}
# rehash, quit, status {{{2
fn Action-rehash {
	proglist $PATH >$progs_file
}
fn Action-quit {
	wmiir xwrite /ctl quit
}
fn Action-status {
	if(wmiir remove /rbar/status >[2]/dev/null)
		sleep 2
	echo $WMII_NORMCOLORS | wmiir create /rbar/status
	while(status | wmiir write /rbar/status)
		sleep 1
}
# 2}}}
fn Action-mp3 { # restart mp3 bar applet {{{2
	wmii-mpc-status &
	wmii-mpc-controls &
}
fn Action-term { # open a terminal in 'dev' {{{2
	queue_tag dev
	run_command $WMII_TERM &
}
fn Action-vim { # {{{2
	run_command $WMII_TERM -e vim &
}
fn Action-irc { # {{{2
	queue_tag irc
	run_command $WMII_TERM -e screen -raAd &
}
fn Action-ff { # open firefox {{{2
	run_command firefox `{sselp}
}

fn Action-playlist { # {{{2
	choice=`{mpc playlist | wmiimenu}
	if (test -n $choice)
		mpc play `{echo $choice|sed 's/^#([0-9]+)\).*/\1/'}
}
fn Action-screenshot { # {{{2
	run_command xwd -root | xwdtopnm | pnmtopng >$home/ss.png
}


# Key Bindings {{{1
fn Key-$MODKEY-Control-r { # raw mode {{{2
	if(~ `{wmiir read /keys | wc -l} 0) {
		initkeys
		wmiir xwrite /ctl grabmod $MODKEY
	}
	if not {
		wmiir xwrite /ctl keys $MODKEY-Control-t
		wmiir xwrite /ctl grabmod Mod3
	}
}
fn Key-$MODKEY-$LEFT { # {{{2
	wmiir xwrite /tag/sel/ctl select left
}
fn Key-$MODKEY-$RIGHT { # {{{2
	wmiir xwrite /tag/sel/ctl select right
}
fn Key-$MODKEY-$DOWN { # {{{2
	wmiir xwrite /tag/sel/ctl select down
}
fn Key-$MODKEY-$UP { # {{{2
	wmiir xwrite /tag/sel/ctl select up
}
fn Key-$MODKEY-space { # {{{2
	wmiir xwrite /tag/sel/ctl select toggle
}
fn Key-$MODKEY-d { # {{{2
	wmiir xwrite /tag/sel/ctl colmode sel default
}
fn Key-$MODKEY-s { # {{{2
	wmiir xwrite /tag/sel/ctl colmode sel stack
}
fn Key-$MODKEY-m { # {{{2
	wmiir xwrite /tag/sel/ctl colmode sel max
}
fn Key-$MODKEY-a { # {{{2
	Action `{actionlist | wmiimenu} &
}
fn Key-$MODKEY-p { # {{{2
	run_command `{wmiimenu <$progs_file} &
}
fn Key-$MODKEY-Return { # {{{2
	run_command $WMII_TERM &
}
fn Key-$MODKEY-t { # {{{2
	wmiir xwrite /ctl view `{read_tags | wmiimenu} &
}
fn Key-$MODKEY-Shift-$LEFT { # {{{2
	wmiir xwrite /tag/sel/ctl send sel left
}
fn Key-$MODKEY-Shift-$RIGHT { # {{{2
	wmiir xwrite /tag/sel/ctl send sel right
}
fn Key-$MODKEY-Shift-$DOWN { # {{{2
	wmiir xwrite /tag/sel/ctl send sel down
}
fn Key-$MODKEY-Shift-$UP { # {{{2
	wmiir xwrite /tag/sel/ctl send sel up
}
fn Key-$MODKEY-Control-$UP { # {{{2
	ctag=`{wmiir read /tag/sel/ctl}
	wmiir xwrite /ctl view `{
		wmiir ls /tag \
		| sed 's|/$||; /^sel$/d' | sort -r \
		| awk 'NR==1{ntag=$0} /^'$ctag'$/{ntag=getline?$0:ntag; print ntag}'
	}
}
fn Key-$MODKEY-Control-$DOWN { # {{{2
	ctag=`{wmiir read /tag/sel/ctl}
	wmiir xwrite /ctl view `{
		wmiir ls /tag \
		| sed 's|/$||; /^sel$/d' \
		| awk 'NR==1{ntag=$0} /^'$ctag'$/{ntag=getline?$0:ntag; print ntag}'
	}
}
fn Key-$MODKEY-Shift-space { # {{{2
	wmiir xwrite /tag/sel/ctl send sel toggle
}
fn Key-$MODKEY-Shift-c { # {{{2
	wmiir xwrite /client/sel/ctl kill
}
fn Key-$MODKEY-Shift-t { # {{{2
	wmiir xwrite /client/`{wmiir read /client/sel/ctl}^/tags `{read_tags | wmiimenu} &
}
for(i in `{seq 0 9}) { # {{{2
	fn Key-$MODKEY-$i {
		wmiir xwrite /ctl view `{wmiir ls /tag | egrep -v '^sel/' | sed -n `{echo $1 | sed 's/.*-//'}^p}
	}
	fn Key-$MODKEY2-$i {
		wmiir xwrite /ctl view `{echo $1 | sed 's/.*-//'}
	}
	fn Key-Shift-$MODKEY-$i {
		wmiir xwrite /client/sel/tags `{echo $1 | sed 's/.*-//'}
	}
}

# mpc 'plugin' key bindings {{{2
fn Key-$MODKEY2-KP_Add { # volume +5 {{{3
	mixer pcm +5:+5
}
fn Key-$MODKEY2-KP_Subtract { # volume -5 {{{3
	mixer pcm -5:-5
}
fn Key-$MODKEY2-n { # next {{{3
	mpc next
}
fn Key-$MODKEY2-b { # prev {{{3
	mpc prev
}
fn Key-$MODKEY2-s { # stop {{{3
	mpc stop
}
fn Key-$MODKEY2-p { # toggle pause/play {{{3
	mpc toggle
}
fn Key-$MODKEY2-r { # toggle random {{{3
	mpc random
}
# 2}}}
# 1}}}

# WM Configuration {{{1
wmiir write /ctl <<!
grabmod $MODKEY
border 2
font $WMII_FONT
focuscolors $WMII_FOCUSCOLORS
normcolors $WMII_NORMCOLORS
!

# Functions {{{1
fn proglist {
        /bin/ls -lL `{echo $* | tr : ' '} >[2]/dev/null |
		awk '$1 ~ /^[^d].*x/ { print $NF }' |
		sort | uniq
}

fn actionlist {
	{ proglist $WMII_CONFPATH;
	  env | sed -n 's/^fn#Action-([^=]+).*/\1/p'
	} | sort | uniq
}

fn read_tags {
	wmiir ls /tag | sed 's,/,,; /^sel$/d'
}

fn config_whatis {
	confpath=`{echo $WMII_CONFPATH | sed 'y/:/ /'}
	prog=$1; shift
	echo `{{path=$confpath whatis $prog} | grep -v '=|^fn '} $*
}

fn run_command {
	rfork ens
	path=$oldpath \
	eval exec $* </dev/null
}

fn replace_default_tagrules {
	rule=$1
	wmiir read /tagrules | 9 grep '^\/\.\*\/' > $tagrules_file
	{
		wmiir read /tagrules | 9 grep -v '^\/\.\*\/'
		echo $rule
	} | wmiir write /tagrules
}

fn restore_default_tagrules {
	{
		wmiir read /tagrules | 9 grep -v '^\/\.\*\/'
		cat $tagrules_file
	} | wmiir write /tagrules
}

fn queue_tag {
	replace_default_tagrules '/.*/ -> '^$1
}

# mpc 'plugin' support methods {{{2
fn wmii-mpc-info {
	format='%artist% -[[ %album% -]&[ %track -]] %title%'
	echo np: `{mpc --format $format|head -1} [ `{mpc|head -2|tail -1|cut -d ' ' -f 5} ]
}

fn wmii-mpc-status {
	bar=200_mp3status
	if (wmiir remove /rbar/$bar >[2]/dev/null)
		sleep 2
	echo $WMII_NORMCOLORS | wmiir create /rbar/$bar
	while (wmii-mpc-info | wmiir write /rbar/$bar)
		sleep 1
}

fn wmii-mpc-controls {
	bars=(201_mp3ldiv 202_mp3prev 203_mp3stop 204_mp3toggle 205_mp3next 206_mp3rdiv)
	for (bar in $bars)
		wmiir remove /rbar/$bar >[2]/dev/null
	sleep 2
	for (bar in $bars)  {
		echo $WMII_NORM_COLORS | wmiir create /rbar/$bar
		switch ($bar) {
			case *ldiv
				sym = '['
			case *prev
				sym = '<<'
			case *stop
				sym = 'X'
			case *toggle
				sym = '#'
			case *next
				sym = '>>'
			case *rdiv
				sym = '] |'
		}
		wmiir xwrite /rbar/$bar $WMII_NORMCOLORS $sym
	}
}

fn wmii-mpc-barclick {
	bar=$1
	switch ($bar) {
		case *mp3prev
			mpc prev
		case *mp3stop
			mpc stop
		case *mp3toggle
			mpc toggle
		case *mp3next
			mpc next
	}
}
# 2}}}
# 1}}}

# Startup
xsetroot -solid $WMII_BACKGROUND
Action status &
Action mp3 &
tagrules_file=$WMII_NS_DIR/tagrules.$pid
progs_file=$WMII_NS_DIR/proglist.$pid
proglist $PATH >$progs_file &

fn initkeys {
	env | sed -n 's/^fn#Key-([^=]+).*/\1/p' \
	| wmiir write /keys
}

initkeys

# Tag Bar
ifs='#
'{
	for(bar in `{wmiir ls /lbar})
		wmiir remove /lbar/$bar
	seltag=`{wmiir read /tag/sel/ctl}
	for(tag in `{wmiir ls /tag | sed -e 's,/,,; /^sel$/d'}) {
		if(~ $tag $seltag)
			echo $WMII_FOCUSCOLORS $tag | wmiir create /lbar/$tag
		if not
			echo $WMII_NORMCOLORS $tag | wmiir create /lbar/$tag
	}
}

# Kill other wmiircs
if(echo Start wmiirc | ! wmiir write /event >[2]/dev/null)
	exit 1

# Event Loop
wmiir read /event |
	while(*=`{read}) {
		if(~ $debug true)
			echo $*
		event = $1; shift
		eval Event-$event $* >[2]/dev/null
	}
